SELECT USER
FROM DUAL;
--==>> HR

--① 현정
CREATE TABLE ADMINISTRATOR
( ADMIN_ID  VARCHAR2(30)
, ADMIN_PW  VARCHAR2(30) 
, CONSTRAINT ADMINISTRATOR_ADMIN_ID_PK PRIMARY KEY(ADMIN_ID)
);

ALTER TABLE ADMINISTRATOR
MODIFY
( ADMIN_PW CONSTRAINT ADMINISTRATOR_ADMIN_PW_NN NOT NULL );



CREATE TABLE ESTABLISHED_SUB
( EST_SUB_ID        VARCHAR2(30)
, PRO_ID            VARCHAR2(30)
, COURSE_ID         VARCHAR2(30)
, SUB_ID            VARCHAR2(30)
, ATTEND_PER        NUMBER(3)
, PRACTICAL_PER     NUMBER(3)
, WRITING_PER       NUMBER(3)
, CONSTRAINT EST_SUB_EST_SUB_ID_PK PRIMARY KEY(EST_SUB_ID)
, CONSTRAINT EST_SUB_PRO_ID_FK FOREIGN KEY(PRO_ID) 
                                       REFERENCES PROFESSORS(PRO_ID)
, CONSTRAINT SUBJECTS_COURSE_ID_FK FOREIGN KEY(COURSE_ID) 
                                       REFERENCES COURSE(COURSE_ID)
, CONSTRAINT EST_SUB_SUB_ID_FK FOREIGN KEY(SUB_ID) 
                                       REFERENCES SUBJECTS(SUB_ID)
, CONSTRAINT EST_SUB_ATTEND_PER_CK CHECK(ATTEND_PER BETWEEN 0 AND 100)
, CONSTRAINT EST_SUB_PRACTICAL_PER_CK CHECK(PRACTICAL_PER BETWEEN 0 AND 100)
, CONSTRAINT EST_SUB_WRITING_PER_CK CHECK(WRITING_PER BETWEEN 0 AND 100)
, CONSTRAINT EST_SUB_TOTAL_PER_CK CHECK( (ATTEND_PER + PRACTICAL_PER + WRITING_PER) = 100 )
);

DROP TABLE ESTABLISHED_SUB;

--② 승균
CREATE TABLE COURSE
( COURSE_ID     VARCHAR2(30)  
, COURSE_NAME   VARCHAR2(30)
, PRO_ID        VARCHAR2(30)
, C_START       DATE
, C_END         DATE
, CLASSROOM     VARCHAR2(30)
, CONSTRAINT COURSE_COURSE_ID_PK PRIMARY KEY(COURSE_ID)
, CONSTRAINT COURSE_COURSE_NAME_FK FOREIGN KEY(PRO_ID)
                                            REFERENCES PROFESSORS(PRO_ID)
, CONSTRAINT COURSE_C_START_CK CHECK(C_START < C_END)
);

DROP TABLE COURSE;

CREATE TABLE TEST
(
 TEST_ID          VARCHAR2(30)
,EST_SUB_ID       VARCHAR2(30)
,TEST_DATE        DATE
,CONSTRAINT TEST_TEST_ID_PK PRIMARY KEY(TEST_ID)
,CONSTRAINT TEST_EST_SUB_ID_FK FOREIGN KEY(EST_SUB_ID) REFERENCES ESTABLISHED_SUB(EST_SUB_ID)
);

DROP TABLE TEST;


--③ 미화
CREATE TABLE MID_DROP
( DROP_ID       VARCHAR2(30)
, ENROLL_ID     VARCHAR2(30)
, DROP_DATE     DATE           NOT NULL
, CONSTRAINT MID_DPOP_ID_PK PRIMARY KEY(DROP_ID)
, CONSTRAINT MID_DPOP_ENROLL_ID_FK FOREIGN KEY(ENROLL_ID)
             REFERENCES ENROLL(E_ID)
-- 등록일보다 중도포기 날짜가 뒤여야 한다는 제약조건
);

DROP TABLE MID_DROP;

CREATE TABLE SCORE
( SCORE_ID              VARCHAR2(30) 
, ENROLL_ID             VARCHAR2(30)
, EST_SUB_ID            VARCHAR2(30)
, ATTEND_SCORE          NUMBER(3)
, PRACTICAL_SCORE       NUMBER(3)
, WRITING_SCORE         NUMBER(3)
, CONSTRAINT SOCRE_ID_PK PRIMARY KEY(SCORE_ID)
, CONSTRAINT SCORE_ENROLL_ID_FK FOREIGN KEY(ENROLL_ID)
             REFERENCES ENROLL(E_ID)
, CONSTRAINT SCORE_ESTABLISHED_SUB_ID_FK FOREIGN KEY(EST_SUB_ID)
             REFERENCES ESTABLISHED_SUB(EST_SUB_ID)
, CONSTRAINT SCORE_ATTEND_SCORE_CK CHECK(ATTEND_SCORE BETWEEN 0 AND 100)            
, CONSTRAINT SCORE_PRACTICAL_SCORE_CK CHECK(PRACTICAL_SCORE BETWEEN 0 AND 100)            
, CONSTRAINT SCOREWRITING_SCORE_CK CHECK(WRITING_SCORE BETWEEN 0 AND 100)

);

DROP TABLE SCORE;


--④ 효진
-- 교수정보 테이블
CREATE TABLE PROFESSORS
( PRO_ID     VARCHAR2(30)                               -- 교수자번호
, PRO_NAME   VARCHAR2(10)                               -- 교수자명
, PRO_PW     VARCHAR2(30)                               -- 교수자 비밀번호(초기값은 주민번호 뒷자리)
, PRO_SSN    CHAR(14)                                   -- 교수자 주민번호
, CONSTRAINT PROFESSORS_PRO_ID_PK PRIMARY KEY(PRO_ID)
);

-- NOT NULL 제약조건 수정
ALTER TABLE PROFESSORS
MODIFY
( PRO_NAME CONSTRAINT PROFESSORS_PRO_NAME_NN NOT NULL
, PRO_PW CONSTRAINT PROFESSORS_PRO_PW_NN NOT NULL
, PRO_SSN CONSTRAINT PROFESSORS_PRO_SSN_NN NOT NULL
);

ALTER TABLE PROFESSORS
ADD CONSTRAINT PROFESSORS_PRO_SSN_UK UNIQUE(PRO_SSN);

-- 과목 테이블
CREATE TABLE SUBJECTS
( SUB_ID            VARCHAR2(30)        -- 과목코드
, SUB_NAME            VARCHAR2(30)
, S_START           DATE                -- 시작일
, S_END             DATE                -- 종료일
, CLASSROOM         VARCHAR2(30)        -- 강의실
, BOOK_NAME         VARCHAR2(30)        -- 책이름
, CONSTRAINT SUBJECTS_SUB_ID_PK PRIMARY KEY(SUB_ID)
, CONSTRAINT SUBJECTS_S_START_CK CHECK(S_START < S_END)
);

DROP TABLE SUBJECTS;

-- 이벤트로그(PRO_EVENTLOG) 테이블 생성
CREATE TABLE PRO_EVENTLOG
( PRO_ID    VARCHAR2(30)
, MEMO      VARCHAR2(200)
, ILJA      DATE DEFAULT SYSDATE
, CONSTRAINT PRO_EVENTLOG_PRO_ID_FK FOREIGN KEY(PRO_ID)
                REFERENCES PROFESSORS(PRO_ID)
);

--⑤ 지윤
--학생정보
CREATE TABLE STUDENTS
( ST_ID     VARCHAR2(30) 
, ST_PW     VARCHAR2(30)         -- ★초기값 주민번호 뒷자리
, ST_NAME   VARCHAR2(10)  
, ST_SSN    CHAR(14)     UNIQUE
, ST_DATE   DATE         DEFAULT SYSDATE
, CONSTRAINT STUDENTS_ST_ID_PK PRIMARY KEY(ST_ID)
);

-- 제약조건 수정
ALTER TABLE STUDENTS
MODIFY
( ST_ID CONSTRAINT STUDENTS_STUDENT_ID_NN NOT NULL
, ST_NAME CONSTRAINT STUDENTS_STUDENT_NAME_NN NOT NULL
, ST_PW CONSTRAINT STUDENTS_STUDENT_PASSWORD_NN NOT NULL
, ST_SSN CONSTRAINT STUDENTS_STUDENT_SSN_NN NOT NULL
, ST_DATE CONSTRAINT STUDENTS_STUDENT_DATE_NN NOT NULL
);

--수강신청
CREATE TABLE ENROLL
( E_ID          VARCHAR2(30)
, ST_ID         VARCHAR2(30)
, COURSE_ID     VARCHAR2(30)
, E_DATE        DATE    DEFAULT SYSDATE
, CONSTRAINT ENROLL_E_ID_PK PRIMARY KEY(E_ID)
, CONSTRAINT ENROLL_ST_ID_FK FOREIGN KEY(ST_ID) 
                                       REFERENCES STUDENTS(ST_ID)
, CONSTRAINT ENROLL_COURSE_ID_FK FOREIGN KEY(COURSE_ID) 
                                       REFERENCES COURSE(COURSE_ID)
);

-- 제약조건 수정
ALTER TABLE ENROLL
MODIFY
(E_DATE   CONSTRAINT ENROLL_E_DATE_NN NOT NULL
);



DROP TABLE ENROLL;

DROP TABLE MID_DROP;
DROP TABLE SCORE;
DROP TABLE ENROLL;
DROP TABLE TEST;

--○ 학생 INSERT, UPDATE 로그 테이블
CREATE TABLE STD_EVENTLOG
( ST_ID         VARCHAR2(30)
, ILJA          DATE DEFAULT SYSDATE
, MEMO          VARCHAR2(200)
, CONSTRAINT TBL_EVENTLOG_ST_ID_FK FOREIGN KEY(ST_ID) 
                                       REFERENCES STUDENTS(ST_ID)
);
--==>> Table STD_EVENTLOG이(가) 생성되었습니다.




--③ 미화
-- 중도포기 INSERT 프로시저
--> 중도포기 레코드를 입력 시, "과정 시작일 < 중도포기일 < 과정종료일"이 맞는지 확인하는 프로시저
CREATE OR REPLACE PROCEDURE PRC_MID_DROP_INSERT
( V_DROP_ID     IN MID_DROP.DROP_ID%TYPE
, V_ENROLL_ID   IN MID_DROP.ENROLL_ID%TYPE
, V_DROP_DATE   IN MID_DROP.DROP_DATE%TYPE
)
IS
    V_COURSE_ID         COURSE.COURSE_ID%TYPE;
    V_C_START           COURSE.C_START%TYPE;
    V_C_END             COURSE.C_END%TYPE;
    USER_DEFINE_ERROR   EXCEPTION;

BEGIN
    -- 변수에 값 담기
    SELECT COURSE_ID INTO V_COURSE_ID
    FROM ENROLL
    WHERE ENROLL_ID = V_ENROLL_ID;    
    
    SELECT C_START, C_END INTO V_C_START, V_C_END
    FROM COURSE
    WHERE COURSE_ID = V_COURSE_ID;
    
    -- 예외 처리 : "과정 시작일 < 중도포기일 < 과정종료일"이 아닐 경우
    IF (V_DROP_DATE < V_C_START OR V_DROP_DATE > V_C_END)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;

    -- INSERT
    INSERT INTO MID_DROP(DROP_ID, ENROLL_ID, DROP_DATE)
    VALUES (V_DROP_ID, V_ENROLL_ID, V_DROP_DATE);
    
    -- 커밋
    COMMIT;
    
    -- 예외 발생
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '중도포기 날짜가 잘못 입력되었습니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;



-- 샘플데이터
-- 1. 관리자
INSERT INTO ADMINISTRATOR(ADMIN_ID, ADMIN_PW) VALUES('AD1', 'QWER1234');
INSERT INTO ADMINISTRATOR(ADMIN_ID, ADMIN_PW) VALUES('AD2', 'ASDF1234');

-- 2. 교수
INSERT INTO PROFESSORS(PRO_ID, PRO_NAME, PRO_PW, PRO_SSN)
VALUES('PRO1', '남궁 성', 'QWER1234', '840218-2813239');

INSERT INTO PROFESSORS(PRO_ID, PRO_NAME, PRO_PW, PRO_SSN)
VALUES('PRO2', '서진수', 'ASDF1234', '111111-1111111');

-- 3. 학생
INSERT INTO STUDENTS(ST_ID, ST_PW, ST_NAME, ST_SSN, ST_DATE)
VALUES('STU1', 'QWER1234', '정회일', '111111-3111111', TO_DATE('2020-09-24', 'YYYY-MM-DD'));

INSERT INTO STUDENTS(ST_ID, ST_PW, ST_NAME, ST_SSN, ST_DATE)
VALUES('STU2', 'ASDF1234', '김초엽', '111111-4111111', TO_DATE('2020-09-24', 'YYYY-MM-DD'));

-- 4. 과목
INSERT INTO SUBJECTS(SUB_ID, SUB_NAME, S_START, S_END, CLASSROOM, BOOK_NAME)
VALUES('SUB1', '오라클중급',  TO_DATE('2020-12-24', 'YYYY-MM-DD'),  TO_DATE('2021-1-19', 'YYYY-MM-DD'), '오라클강의실A1', '오라클의정석');

INSERT INTO SUBJECTS(SUB_ID, SUB_NAME, S_START, S_END, CLASSROOM, BOOK_NAME)
VALUES('SUB2', '자바고급',  TO_DATE('2020-7-2', 'YYYY-MM-DD'),  TO_DATE('2020-9-19', 'YYYY-MM-DD'), '자바강의실B1', '고급자바마스터');

-- 5. 과정
INSERT INTO COURSE(COURSE_ID, COURSE_NAME, PRO_ID, C_START, C_END, CLASSROOM)
VALUES('CO1', '개발자양성과정', 'PRO1', TO_DATE('2020-11-24', 'YYYY-MM-DD'), TO_DATE('2021-4-18', 'YYYY-MM-DD'), '오라클강의실A1');

INSERT INTO COURSE(COURSE_ID, COURSE_NAME, PRO_ID, C_START, C_END, CLASSROOM)
VALUES('CO2', '빅데이터전문가과정', 'PRO2', TO_DATE('2020-6-14', 'YYYY-MM-DD'), TO_DATE('2020-12-30', 'YYYY-MM-DD'), '자바강의실B1');


-- 6. 개설과목
INSERT INTO ESTABLISHED_SUB(EST_SUB_ID, PRO_ID, COURSE_ID, SUB_ID, ATTEND_PER, PRACTICAL_PER, WRITING_PER)
VALUES('ESI1', 'PRO1', 'CO1', 'SUB1', 20, 40, 40);

INSERT INTO ESTABLISHED_SUB(EST_SUB_ID, PRO_ID, COURSE_ID, SUB_ID, ATTEND_PER, PRACTICAL_PER, WRITING_PER)
VALUES('ESI2', 'PRO2', 'CO2', 'SUB2', 20, 20, 60);

-- 7. 시험
INSERT INTO TEST(TEST_ID, SUB_ID, TEST_DATE)
VALUES('TEST1', 'SUB1', TO_DATE('2020-12-31', 'YYYY-MM-DD'));

INSERT INTO TEST(TEST_ID, SUB_ID, TEST_DATE)
VALUES('TEST2', 'SUB1', TO_DATE('2021-01-10', 'YYYY-MM-DD'));


-- 8. 수강신청
INSERT INTO ENROLL(ENROLL_ID, ST_ID, COURSE_ID, ENROLL_DATE)
VALUES('ENROLL1', 'STU1', 'CO1', TO_DATE('2020-10-24', 'YYYY-MM-DD'));

INSERT INTO ENROLL(ENROLL_ID, ST_ID, COURSE_ID, ENROLL_DATE)
VALUES('ENROLL2', 'STU2', 'CO1', TO_DATE('2020-10-25', 'YYYY-MM-DD'));

-- 9. 성적
INSERT INTO SCORE(SCORE_ID, ENROLL_ID, EST_SUB_ID, ATTEND_SCORE, PRACTICAL_SCORE, WRITING_SCORE)
VALUES('SCORE1', 'ENROLL1', 'ESI1', 90, 30, 100);

-- 10. 중도포기
INSERT INTO MID_DROP(DROP_ID, ENROLL_ID, DROP_DATE)
VALUES('DROP1', 'ENROLL2', TO_DATE('2020-10-29', 'YYYY-MM-DD'));

-- 커밋
COMMIT;



--○ 관리자 요구 분석
-- 3-5~6. 모든 교수자의 정보를 출력
-- 교수자명, 과목명, 과목기간(시작), 과목기간(끝), 교재명, 강의실, 강의진행여부(강의 예정, 강의 중, 강의종료)
SELECT P.PRO_NAME "교수자명", S.SUB_NAME "과목명", S.S_START "과목 시작일", S.S_END "과목 종료일"
     , S.BOOK_NAME "교재명", S.CLASSROOM "강의실"
     , CASE WHEN SYSDATE < S.S_START THEN '강의 예정'
            WHEN S.S_END < SYSDATE THEN '강의 종료'
            ELSE '강의 중'
       END "강의진행여부"
FROM PROFESSORS P JOIN ESTABLISHED_SUB E
     ON P.PRO_ID = E.PRO_ID
                 JOIN SUBJECTS S
                 ON E.SUB_ID = S.SUB_ID;


-- 4-4~5. 모든 과정의 정보를 출력
-- 과정명, 강의실, 과목기간(시작), 과목기간(끝), 교재명, 교수자명

-- ① 과정명, 과정 강의실, 과목명, 과목 강의실, 과목 시작일, 과목 종료일, 교재명, 교수자명
-- 아래 과목 정보 출력과 중복되는 내용이 많다.
SELECT C.COURSE_NAME "과정명", C.CLASSROOM "과정 강의실"
     , S.SUB_NAME "과목명", S.CLASSROOM "과목 강의실", S.S_START "과목 시작일", S.S_END "과목 종료일"
     , S.BOOK_NAME "교재명", P.PRO_NAME "교수자명"
FROM COURSE C JOIN PROFESSORS P
     ON C.PRO_ID = P.PRO_ID
             JOIN ESTABLISHED_SUB E
             ON C.COURSE_ID = E.COURSE_ID
                    JOIN SUBJECTS S
                    ON E.SUB_ID = S.SUB_ID;
                    
-- ② 과정명, 과정 강의실, 과정 시작일, 과정 종료일, 교재명, 교수자명
-- 위 ①의 특이사항 때문에 수정(요구분석에는 '과목 기간'으로 나와있지만 '과정 기간'으로 해석한 경우)
SELECT C.COURSE_NAME "과정명", C.CLASSROOM "과정 강의실", C.C_START "과정 시작일", C.C_END "과정 종료일"
     , S.SUB_NAME "과목명", S.CLASSROOM "과목 강의실"
     , S.BOOK_NAME "교재명", P.PRO_NAME "교수자명"
FROM COURSE C JOIN PROFESSORS P
     ON C.PRO_ID = P.PRO_ID
             JOIN ESTABLISHED_SUB E
             ON C.COURSE_ID = E.COURSE_ID
                    JOIN SUBJECTS S
                    ON E.SUB_ID = S.SUB_ID;                    
                    

-- 5-8~9. 모든 과목의 정보 출력
-- 과정명, 강의실, 과목명, 과목기간(시작), 과목기간(끝), 교재명, 교수자명
SELECT C.COURSE_NAME "과정명", S.CLASSROOM "과목 강의실"
     , S.SUB_NAME "과목명", S.S_START "과목 시작일", S.S_END "과목 종료일"
     , S.BOOK_NAME "교재명", P.PRO_NAME "교수자명"
FROM COURSE C JOIN PROFESSORS P
     ON C.PRO_ID = P.PRO_ID
             JOIN ESTABLISHED_SUB E
             ON C.COURSE_ID = E.COURSE_ID
                    JOIN SUBJECTS S
                    ON E.SUB_ID = S.SUB_ID;


--○ 교수자 요구 분석
-- 3. 성적 출력 기능
-- 자신이 강의한 과목, "과목명, 과목 기간(시작), 과목기간(끝), 교재명, 학생명, 출결, 실기, 필기, 총점, 등수
-- 과정 중도탈락 시: 수강한 과목 성적 출력, 중도탈락 여부 출력
SELECT SUB.SUB_NAME "과목명", SUB.S_START "과목 시작일", SUB.S_END "과목 종료일", SUB.BOOK_NAME "교재명"
     , STU.ST_NAME "학생명", SC.ATTEND_SCORE "출결점수", SC.PRACTICAL_SCORE "실기점수", SC.WRITING_SCORE "필기점수"
     , (NVL(SC.ATTEND_SCORE, 0) + NVL(SC.PRACTICAL_SCORE, 0) + NVL(SC.WRITING_SCORE, 0)) "총점"
     , RANK() OVER(ORDER BY (NVL(SC.ATTEND_SCORE, 0) + NVL(SC.PRACTICAL_SCORE, 0) + NVL(SC.WRITING_SCORE, 0)) DESC) "등수"
     , CASE WHEN MID.E_ID IS NOT NULL THEN 'Y'
            ELSE 'N'
       END "중도포기"
FROM STUDENTS STU LEFT JOIN ENROLL E
    ON STU.ST_ID = E.ST_ID
        LEFT JOIN SCORE SC
        ON E.E_ID = SC.E_ID
            LEFT JOIN ESTABLISHED_SUB EST
            ON SC.EST_SUB_ID = EST.EST_SUB_ID
                LEFT JOIN SUBJECTS SUB
                ON EST.SUB_ID = SUB.SUB_ID
                    LEFT JOIN MID_DROP MID
                    ON E.E_ID = MID.E_ID                    
WHERE PRO_ID IN ('PRO1', 'PRO2'); -- WHERE절에 해당되는 교수 코드 입력


--○ 수강신청 불가 프로시저
-- 아래의 조건을 확인 후 데이터를 입력한다.
-- 1) 계정등록일과 개강일
-- 2) 동일한 과정 신청 여부
-- 3) 수강 날짜 중복
CREATE OR REPLACE PROCEDURE PRC_ENROLL_INSERT
( V_E_ID       IN ENROLL.E_ID%TYPE
, V_ST_ID      IN ENROLL.ST_ID%TYPE
, V_COURSE_ID  IN ENROLL.COURSE_ID%TYPE
, V_E_DATE     IN ENROLL.E_DATE%TYPE
)

IS
   V_ST_DATE           STUDENTS.ST_DATE%TYPE;
   V_C_START           COURSE.C_START%TYPE;     -- 등록하려는 과정의 시작일
   V_C_END             COURSE.C_END%TYPE;       -- 등록하려는 과정의 종료일
   nCNT                NUMBER;
   USER_DEFINE_ERROR   EXCEPTION;
   SAME_COURSE         EXCEPTION;
   SAME_DATE           EXCEPTION;

BEGIN
    -- 예외 처리 1. 계정등록일과 개강일
    -- 수강신청일은 계정등록일보다 빠르거나, 개강일보다 느리거나 같을 수 없다.
    SELECT ST_DATE INTO V_ST_DATE
    FROM STUDENTS
    WHERE ST_ID = V_ST_ID;
    
    SELECT C_START, C_END INTO V_C_START, V_C_END
    FROM COURSE
    WHERE COURSE_ID = V_COURSE_ID;    

    IF (V_E_DATE < V_ST_DATE OR V_E_DATE >= V_C_START)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    
    -- 예외 처리 2. 동일한 과정 신청 여부
    -- 한 학생이 같은 과정을 신청할 수 없다.
    SELECT COUNT(*) INTO nCNT
    FROM ENROLL
    WHERE ST_ID = V_ST_ID AND COURSE_ID = V_COURSE_ID;    
    
    IF (nCNT > 0)
        THEN RAISE SAME_COURSE;
    END IF;

    
    -- 예외 처리 3. 수강 날짜 중복
    -- 한 학생이 기존에 수강한 과정의 날짜가, 새로 수강하려는 과정의 날짜와 겹칠 수 없다.
    SELECT COUNT(*) INTO nCNT
    FROM ENROLL E JOIN COURSE C
      ON E.COURSE_ID = C.COURSE_ID      
    WHERE E.ST_ID = V_ST_ID
      AND ( V_C_START > C.C_START AND V_C_START < C.C_END     -- 등록하려는 과정의 시작 날짜 조건 확인
       OR   V_C_END > C.C_START AND V_C_END < C.C_END );      -- 등록하려는 과정의 종료 날짜 조건 확인

    IF (nCNT > 0)
        THEN RAISE SAME_DATE;
    END IF; 


    -- INSERT
    INSERT INTO ENROLL(E_ID, ST_ID, COURSE_ID, E_DATE)
    VALUES (V_E_ID, V_ST_ID, V_COURSE_ID, V_E_DATE);

    -- 커밋
    COMMIT;
        
    -- 예외 발생
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20002, '수강 신청이 불가능합니다.');
                 ROLLBACK;
        WHEN SAME_COURSE
            THEN RAISE_APPLICATION_ERROR(-20003, '이미 신청한 과목입니다.');
                 ROLLBACK;
        WHEN SAME_DATE
            THEN RAISE_APPLICATION_ERROR(-20004, '날짜가 중복되는 과목입니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;            
END;


/*
-- 예외처리3 확인용
SELECT COUNT(*) --INTO nCNT
FROM ENROLL E JOIN COURSE C
  ON E.COURSE_ID = C.COURSE_ID      
WHERE E.ST_ID = 'STU1'
  AND ( TO_DATE('2020-11-29', 'YYYY-MM-DD') > C.C_START AND TO_DATE('2020-11-29', 'YYYY-MM-DD') < C.C_END     -- 등록하려는 과정의 시작 날짜 조건 확인
   OR   TO_DATE('2020-12-29', 'YYYY-MM-DD') > C.C_START AND TO_DATE('2020-12-29', 'YYYY-MM-DD') < C.C_END );  
*/   












