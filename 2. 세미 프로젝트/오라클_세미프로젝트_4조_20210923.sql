SELECT USER
FROM DUAL;
--==>> HR

--① 현정
CREATE TABLE ADMINISTRATOR
( ADMIN_ID  VARCHAR2(30)
, ADMIN_PW  VARCHAR2(30) 
, CONSTRAINT ADMINISTRATOR_ADMIN_ID_PK PRIMARY KEY(ADMIN_ID)
);

ALTER TABLE ADMINISTRATOR
MODIFY
( ADMIN_PW CONSTRAINT ADMINISTRATOR_ADMIN_PW_NN NOT NULL );



CREATE TABLE ESTABLISHED_SUB
( EST_SUB_ID        VARCHAR2(30)
, PRO_ID            VARCHAR2(30)
, COURSE_ID         VARCHAR2(30)
, SUB_ID            VARCHAR2(30)
, ATTEND_PER        NUMBER(3)
, PRACTICAL_PER     NUMBER(3)
, WRITING_PER       NUMBER(3)
, CONSTRAINT EST_SUB_EST_SUB_ID_PK PRIMARY KEY(EST_SUB_ID)
, CONSTRAINT EST_SUB_PRO_ID_FK FOREIGN KEY(PRO_ID) 
                                       REFERENCES PROFESSORS(PRO_ID)
, CONSTRAINT SUBJECTS_COURSE_ID_FK FOREIGN KEY(COURSE_ID) 
                                       REFERENCES COURSE(COURSE_ID)
, CONSTRAINT EST_SUB_SUB_ID_FK FOREIGN KEY(SUB_ID) 
                                       REFERENCES SUBJECTS(SUB_ID)
, CONSTRAINT EST_SUB_ATTEND_PER_CK CHECK(ATTEND_PER BETWEEN 0 AND 100)
, CONSTRAINT EST_SUB_PRACTICAL_PER_CK CHECK(PRACTICAL_PER BETWEEN 0 AND 100)
, CONSTRAINT EST_SUB_WRITING_PER_CK CHECK(WRITING_PER BETWEEN 0 AND 100)
, CONSTRAINT EST_SUB_TOTAL_PER_CK CHECK( (ATTEND_PER + PRACTICAL_PER + WRITING_PER) = 100 )
);

--② 승균
CREATE TABLE COURSE
( COURSE_ID     VARCHAR2(30)  
, COURSE_NAME   VARCHAR2(30)
, PRO_ID        VARCHAR2(30)
, C_START       DATE
, C_END         DATE
, CLASSROOM     VARCHAR2(30)
, CONSTRAINT COURSE_COURSE_ID_PK PRIMARY KEY(COURSE_ID)
, CONSTRAINT COURSE_COURSE_NAME_FK FOREIGN KEY(PRO_ID)
                                            REFERENCES PROFESSORS(PRO_ID)
, CONSTRAINT COURSE_C_START_CK CHECK(C_START < C_END)
);

--DROP TABLE COURSE;

CREATE TABLE TEST
(
 TEST_ID      VARCHAR2(30)
,SUB_ID       VARCHAR2(30)
,TEST_DATE      DATE
,CONSTRAINT TEST_TEST_ID_PK PRIMARY KEY(TEST_ID)
,CONSTRAINT TEST_SUB_ID_FK FOREIGN KEY(SUB_ID) REFERENCES SUBJECTS(SUB_ID)
);


--③ 미화
CREATE TABLE MID_DROP
( DROP_ID       VARCHAR2(30)
, ENROLL_ID     VARCHAR2(30)
, DROP_DATE     DATE           NOT NULL     
, CONSTRAINT MID_DPOP_ID_PK PRIMARY KEY(DROP_ID)
, CONSTRAINT MID_DPOP_ENROLL_ID_FK FOREIGN KEY(ENROLL_ID)
             REFERENCES ENROLL(ENROLL_ID)
);

CREATE TABLE SCORE
( SCORE_ID              VARCHAR2(30) 
, ENROLL_ID             VARCHAR2(30)
, EST_SUB_ID            VARCHAR2(30)
, ATTEND_SCORE          NUMBER(3)
, PRACTICAL_SCORE       NUMBER(3)
, WRITING_SCORE         NUMBER(3)
, CONSTRAINT SOCRE_ID_PK PRIMARY KEY(SCORE_ID)
, CONSTRAINT SCORE_ENROLL_ID_FK FOREIGN KEY(ENROLL_ID)
             REFERENCES ENROLL(ENROLL_ID)
, CONSTRAINT SCORE_ESTABLISHED_SUB_ID_FK FOREIGN KEY(EST_SUB_ID)
             REFERENCES ESTABLISHED_SUB(EST_SUB_ID)            
, CONSTRAINT SCORE_TOTAL_CK CHECK( (ATTEND_SCORE + PRACTICAL_SCORE + WRITING_SCORE) < 100 )
);


--④ 효진
-- 교수정보 테이블
CREATE TABLE PROFESSORS
( PRO_ID     VARCHAR2(30)                               -- 교수자번호
, PRO_NAME   VARCHAR2(10)                               -- 교수자명
, PRO_PW     VARCHAR2(30)                               -- 교수자 비밀번호(초기값은 주민번호 뒷자리)
, PRO_SSN    CHAR(14)                                   -- 교수자 주민번호
, CONSTRAINT PROFESSORS_PRO_ID_PK PRIMARY KEY(PRO_ID)
);

-- NOT NULL 제약조건 수정
ALTER TABLE PROFESSORS
MODIFY
( PRO_NAME CONSTRAINT PROFESSORS_PRO_NAME_NN NOT NULL
, PRO_PW CONSTRAINT PROFESSORS_PRO_PW_NN NOT NULL
, PRO_SSN CONSTRAINT PROFESSORS_PRO_SSN_NN NOT NULL
);

-- 과목 테이블
CREATE TABLE SUBJECTS
( SUB_ID            VARCHAR2(30)        -- 과목코드
, C_START           DATE                -- 시작일
, C_END             DATE                -- 종료일
, CLASSROOM         VARCHAR2(30)        -- 강의실
, BOOK_NAME         VARCHAR2(30)        -- 책이름
, CONSTRAINT SUBJECTS_SUB_ID_PK PRIMARY KEY(SUB_ID)
, CONSTRAINT SUBJECTS_C_START_CK CHECK(C_START < C_END)
);

--⑤ 지윤
--학생정보
CREATE TABLE STUDENTS
( ST_ID     VARCHAR2(30) 
, ST_PW     VARCHAR2(30)         -- ★초기값 주민번호 뒷자리
, ST_NAME   VARCHAR2(10)  
, ST_SSN    CHAR(14)     UNIQUE
, ST_DATE   DATE         DEFAULT SYSDATE
, CONSTRAINT STUDENTS_ST_ID_PK PRIMARY KEY(ST_ID)
);

-- 제약조건 수정
ALTER TABLE STUDENTS
MODIFY
( ST_ID CONSTRAINT STUDENTS_STUDENT_ID_NN NOT NULL
, ST_NAME CONSTRAINT STUDENTS_STUDENT_NAME_NN NOT NULL
, ST_PW CONSTRAINT STUDENTS_STUDENT_PASSWORD_NN NOT NULL
, ST_SSN CONSTRAINT STUDENTS_STUDENT_SSN_NN NOT NULL
, ST_DATE CONSTRAINT STUDENTS_STUDENT_DATE_NN NOT NULL
);

--수강신청
CREATE TABLE ENROLL
( ENROLL_ID     VARCHAR2(30)
, ST_ID         VARCHAR2(30)
, COURSE_ID     VARCHAR2(30)
, ENROLL_DATE   DATE    DEFAULT SYSDATE
, CONSTRAINT ENROLL_ENROLL_ID_PK PRIMARY KEY(ENROLL_ID)
, CONSTRAINT ENROLL_ST_ID_FK FOREIGN KEY(ST_ID) 
                                       REFERENCES STUDENTS(ST_ID)
, CONSTRAINT ENROLL_COURSE_ID_FK FOREIGN KEY(COURSE_ID) 
                                       REFERENCES COURSE(COURSE_ID)
);

-- 제약조건 수정
ALTER TABLE ENROLL
MODIFY
( ENROLL_ID     CONSTRAINT ENROLL_ENROLL_ID_NN NOT NULL
, ENROLL_DATE   CONSTRAINT ENROLL_ENROLL_DATE_NN NOT NULL
);




--③ 미화
-- 중도포기 날짜 INSERT 프로시저
CREATE OR REPLACE PROCEDURE PRC_MID_DROP_INSERT
( V_DROP_ID     IN MID_DROP.DROP_ID%TYPE
, V_ENROLL_ID   IN MID_DROP.ENROLL_ID%TYPE
, V_DROP_DATE   IN MID_DROP.DROP_DATE%TYPE
)
IS
    V_ENROLL_DATE       ENROLL.ENROLL_DATE%TYPE;
    USER_DEFINE_ERROR   EXCEPTION;

BEGIN
    -- 변수에 값 담기
    SELECT ENROLL_DATE INTO V_ENROLL_DATE
    FROM ENROLL
    WHERE ENROLL_ID = V_ENROLL_ID;
    
    -- 예외 처리
    IF (V_ENROLL_DATE > V_DROP_DATE)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;

    -- INSERT
    INSERT INTO MID_DROP(DROP_ID, ENROLL_ID, DROP_DATE)
    VALUES (V_DROP_ID, V_ENROLL_ID, V_DROP_DATE);
    
    -- 커밋
    COMMIT;
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '중도포기 날짜가 잘못 입력되었습니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;
