SELECT USER
FROM DUAL;
--==>>TWO


--○ 관리자 테이블 TBL_ADMIN 생성
CREATE TABLE TBL_ADMIN
( ADMIN_ID  VARCHAR2(20)                                            --관리자 아이디(PK)
, PW        VARCHAR2(20)    CONSTRAINT ADMIN_PW_NN NOT NULL         --관리자 패스워드(NN)
, NAME      VARCHAR2(20)    CONSTRAINT ADMIN_NAME_NN NOT NULL       --관리자 이름
, CONSTRAINT ADMIN_ADMIN_ID_PK PRIMARY KEY(ADMIN_ID)
);


--○ 교수 테이블 TBL_PROFESSOR 생성 
CREATE TABLE TBL_PROFESSOR
( PRO_ID    VARCHAR2(20)
 ,PW        VARCHAR2(20) 
 ,NAME      VARCHAR2(20) CONSTRAINT PROFESSOR_NAME_NN NOT NULL 
 ,FSSN      CHAR(6) CONSTRAINT PROFESSOR_FSSN_NN NOT NULL
 ,BSSN      CHAR(7) CONSTRAINT PROFESSOR_BSSN_NN NOT NULL 
 ,SIGNDATE  DATE DEFAULT SYSDATE
 ,CONSTRAINT PROFESSOR_PRO_ID_PK PRIMARY KEY(PRO_ID)
);


--○ 학생 테이블 TBL_STUDENT 생성
CREATE TABLE TBL_STUDENT
( STU_ID      VARCHAR2(20)
, PW          VARCHAR2(20)    
, NAME        VARCHAR2(20)     CONSTRAINT STUDENT_NAME_NN NOT NULL
, FSSN        CHAR(6)          CONSTRAINT STUDENT_FSSN_NN NOT NULL
, BSSN        CHAR(7)          CONSTRAINT STUDENT_BSSN_NN NOT NULL
, SIGNDATE    DATE             DEFAULT SYSDATE
, CONSTRAINT STUDENT_STU_ID_PK PRIMARY KEY (STU_ID)
);


--○ 강의실 테이블 TBL_CLASSROOM 생성
CREATE TABLE TBL_CLASSROOM
( CLASS_CODE  NUMBER      
, NAME        VARCHAR2(20) CONSTRAINT CLASSROOM_NAME_NN NOT NULL
, CAPACITY    VARCHAR2(50)
, CONSTRAINT CLASSROOM_CLASS_CODE_PK PRIMARY KEY(CLASS_CODE)
);


--○ 배점 테이블 TBL_ALLOT 생성
CREATE TABLE TBL_ALLOT
( ALLOT_CODE    NUMBER       
, ATTEND        NUMBER(3) DEFAULT 0
, PRACTICE      NUMBER(3) DEFAULT 0
, WRITTEN       NUMBER(3) DEFAULT 0
, CONSTRAINT ALLOT_ALLOT_CODE_PK PRIMARY KEY(ALLOT_CODE)
, CONSTRAINT ALLOT_TOTAL_CK CHECK((ATTEND + PRACTICE + WRITTEN) = 100)
);


--○ 과목 테이블 TBL_SUBJECTS 생성
CREATE TABLE TBL_SUBJECTS
( SUB_CODE  NUMBER                                                  --과목코드(PK)
, NAME      VARCHAR2(20)    CONSTRAINT SUBJECTS_NAME_NN NOT NULL    --과목명(NN)
, BOOK      VARCHAR2(50)                                            --교재명
, CONSTRAINT SUBJECTS_SUB_CODE_PK PRIMARY KEY(SUB_CODE)
);


--○ 과정 테이블 TBL_COURSE 생성
CREATE TABLE TBL_COURSE
( COUR_CODE     VARCHAR2(30)
, CLASS_CODE    NUMBER
, STARTDATE     DATE
, ENDDATE       DATE
, LIMIT         NUMBER
, CONSTRAINT COURSE_COUR_CODE_PK PRIMARY KEY(COUR_CODE)
, CONSTRAINT COURSE_CLASS_CODE_FK FOREIGN KEY(CLASS_CODE)
             REFERENCES TBL_CLASSROOM (CLASS_CODE)
, CONSTRAINT COURSE_DATE_INTERVAL CHECK (STARTDATE < ENDDATE)
);


--○ 수강신청 테이블 TBL_REGIST 생성
CREATE TABLE TBL_REGIST
( REG_CODE      NUMBER
 ,STU_ID        VARCHAR2(20)
 ,COUR_CODE     VARCHAR2(30)
 ,REG_DATE      DATE DEFAULT SYSDATE
 ,CONSTRAINT REGIST_REG_CODE_PK PRIMARY KEY(REG_CODE)
 ,CONSTRAINT REGIST_STU_ID_FK FOREIGN KEY(STU_ID)
                        REFERENCES TBL_STUDENT(STU_ID)
 ,CONSTRAINT REGIST_COUR_CODE_FK FOREIGN KEY(COUR_CODE)
                        REFERENCES TBL_COURSE(COUR_CODE)                        
);


--○ 중도하차여부 테이블 TBL_QUIT
CREATE TABLE TBL_QUIT
( QUIT_CODE     NUMBER
, REG_CODE      NUMBER
, REASON        VARCHAR2(100)
, QUIT_DATE     DATE DEFAULT SYSDATE
, CONSTRAINT QUIT_QUIT_CODE_PK PRIMARY KEY(QUIT_CODE)
, CONSTRAINT QUIT_REG_CODE_FK FOREIGN KEY(REG_CODE)
                        REFERENCES TBL_REGIST(REG_CODE)
, CONSTRAINT QUIT_REG_CODE_UK UNIQUE (REG_CODE)                         
);


--○ 개설과목 테이블 TBL_OPSUBJECT 생성
CREATE TABLE TBL_OPSUBJECT
( OPSUB_CODE    NUMBER
, COUR_CODE     VARCHAR2(30)
, SUB_CODE      NUMBER
, PRO_ID        VARCHAR2(20)
, ALLOT_CODE    NUMBER
, STARTDATE     DATE
, ENDDATE       DATE
, CONSTRAINT OPSUBJECT_OPSUB_CODE_PK PRIMARY KEY(OPSUB_CODE)
, CONSTRAINT OPSUBJECT_COUR_CODE_FK FOREIGN KEY(COUR_CODE)
                        REFERENCES TBL_COURSE(COUR_CODE) 
, CONSTRAINT OPSUBJECT_PRO_ID_FK FOREIGN KEY(PRO_ID)
                        REFERENCES TBL_PROFESSOR(PRO_ID) 
, CONSTRAINT OPSUBJECT_ALLOT_CODE_FK FOREIGN KEY(ALLOT_CODE)
                        REFERENCES TBL_ALLOT(ALLOT_CODE) 
, CONSTRAINT OPSUBJECT_DATE_INTERVAL CHECK (STARTDATE < ENDDATE)
);


--○ 성적 테이블 TBL_GRADE 생성
CREATE TABLE TBL_GRADE
( GRADE_CODE    NUMBER
, OPSUB_CODE    NUMBER
, REG_CODE      NUMBER
, ATTEND        NUMBER(3)   DEFAULT 0 
, PRACTICE      NUMBER(3)   DEFAULT 0 
, WRITTEN       NUMBER(3)   DEFAULT 0
, CONSTRAINT GRADE_GRADE_CODE_PK PRIMARY KEY(GRADE_CODE)
, CONSTRAINT GRADE_OPSUB_CODE_FK FOREIGN KEY(OPSUB_CODE)
             REFERENCES TBL_OPSUBJECT (OPSUB_CODE)
, CONSTRAINT GRADE_REG_CODE_FK FOREIGN KEY(REG_CODE)
             REFERENCES TBL_REGIST(REG_CODE)
, CONSTRAINT GRADE_ATTEND_CK CHECK (ATTEND <= 100 AND ATTEND >=0)
, CONSTRAINT GRADE_PRACTICE_CK CHECK (PRACTICE <= 100 AND PRACTICE >=0)
, CONSTRAINT GRADE_WRITTEN_CK CHECK (WRITTEN <= 100 AND WRITTEN >=0)             
);

--================================================================================================

--각 테이블, 컬럼에 커멘트 입력
COMMENT ON TABLE TBL_ADMIN IS '관리자';
COMMENT ON COLUMN TBL_ADMIN.ADMIN_ID IS '관리자 ID';
COMMENT ON COLUMN TBL_ADMIN.PW IS '관리자 PW';
COMMENT ON COLUMN TBL_ADMIN.NAME IS '관리자 NAME';

COMMENT ON TABLE TBL_PROFESSOR IS '교수';
COMMENT ON COLUMN TBL_PROFESSOR.PRO_ID IS '교수 ID';
COMMENT ON COLUMN TBL_PROFESSOR.PW IS '교수 PW';
COMMENT ON COLUMN TBL_PROFESSOR.NAME IS '교수 이름';
COMMENT ON COLUMN TBL_PROFESSOR.FSSN IS '주민번호 앞자리';
COMMENT ON COLUMN TBL_PROFESSOR.BSSN IS '주민번호 뒷자리';
COMMENT ON COLUMN TBL_PROFESSOR.SIGNDATE IS '가입일자';

COMMENT ON TABLE TBL_STUDENT  IS '학생';
COMMENT ON COLUMN TBL_STUDENT.STU_ID IS '학생 ID';
COMMENT ON COLUMN TBL_STUDENT.PW IS '학생 PW';
COMMENT ON COLUMN TBL_STUDENT.NAME IS '교수 이름';
COMMENT ON COLUMN TBL_STUDENT.FSSN IS '주민번호 앞자리';
COMMENT ON COLUMN TBL_STUDENT.BSSN IS '주민번호 뒷자리';
COMMENT ON COLUMN TBL_STUDENT.SIGNDATE IS '가입일자';

COMMENT ON TABLE TBL_CLASSROOM IS '강의실';
COMMENT ON COLUMN TBL_CLASSROOM.CLASS_CODE IS '강의실 번호';
COMMENT ON COLUMN TBL_CLASSROOM.NAME IS '강의실 이름';
COMMENT ON COLUMN TBL_CLASSROOM.CAPACITY IS '강의실 정보';

COMMENT ON TABLE TBL_ALLOT IS '배점';
COMMENT ON COLUMN TBL_ALLOT.ALLOT_CODE IS '배점코드';
COMMENT ON COLUMN TBL_ALLOT.ATTEND IS '출결배점';
COMMENT ON COLUMN TBL_ALLOT.PRACTICE IS '실기배점';
COMMENT ON COLUMN TBL_ALLOT.WRITTEN IS '필기배점';

COMMENT ON TABLE TBL_SUBJECTS IS '과목';
COMMENT ON COLUMN TBL_SUBJECTS.SUB_CODE IS '과목번호';
COMMENT ON COLUMN TBL_SUBJECTS.NAME IS '과목명';

COMMENT ON TABLE TBL_COURSE IS '과정';
COMMENT ON COLUMN TBL_COURSE.COUR_CODE IS '과정이름';
COMMENT ON COLUMN TBL_COURSE.CLASS_CODE IS '강의실 번호';
COMMENT ON COLUMN TBL_COURSE.STARTDATE IS '과정 시작일';
COMMENT ON COLUMN TBL_COURSE.ENDDATE IS '과정 종료일';
COMMENT ON COLUMN TBL_COURSE.LIMIT IS '수강정원';

COMMENT ON TABLE TBL_REGIST IS '수강신청';
COMMENT ON COLUMN TBL_REGIST.REG_CODE IS '수강신청 코드';
COMMENT ON COLUMN TBL_REGIST.STU_ID IS '학생 ID';
COMMENT ON COLUMN TBL_REGIST.COUR_CODE IS '과정 이름';
COMMENT ON COLUMN TBL_REGIST.REG_DATE IS '수강신청 날짜';

COMMENT ON TABLE TBL_QUIT IS '중도하차여부';
COMMENT ON COLUMN TBL_QUIT.QUIT_CODE IS '중도하차 코드';
COMMENT ON COLUMN TBL_QUIT.REG_CODE IS '수강신청 코드';
COMMENT ON COLUMN TBL_QUIT.REASON IS '하차 이유';
COMMENT ON COLUMN TBL_QUIT.QUIT_DATE IS '하차 일자';

COMMENT ON TABLE TBL_OPSUBJECT IS '개설과목';
COMMENT ON COLUMN TBL_OPSUBJECT.OPSUB_CODE IS '개설과목코드';
COMMENT ON COLUMN TBL_OPSUBJECT.COUR_CODE IS '과정이름';
COMMENT ON COLUMN TBL_OPSUBJECT.SUB_CODE IS '과목번호';
COMMENT ON COLUMN TBL_OPSUBJECT.PRO_ID  IS '교수 ID';
COMMENT ON COLUMN TBL_OPSUBJECT.ALLOT_CODE IS '배점 코드';
COMMENT ON COLUMN TBL_OPSUBJECT.STARTDATE IS '과목 시작일';
COMMENT ON COLUMN TBL_OPSUBJECT.ENDDATE IS '과목 종료일';

COMMENT ON TABLE TBL_GRADE IS '성적';
COMMENT ON COLUMN TBL_GRADE.GRADE_CODE IS '성적코드';
COMMENT ON COLUMN TBL_GRADE.OPSUB_CODE IS '개설과목코드';
COMMENT ON COLUMN TBL_GRADE.REG_CODE IS '수강신청코드';
COMMENT ON COLUMN TBL_GRADE.ATTEND IS '출결점수';
COMMENT ON COLUMN TBL_GRADE.PRACTICE IS '실기점수';
COMMENT ON COLUMN TBL_GRADE.WRITTEN IS '필기점수';



--================================================================================================

--■■■ 데이터 입력 ■■■


--○ 관리자 테이블 데이터
INSERT INTO TBL_ADMIN(ADMIN_ID, PW, NAME) VALUES ('ad_limya', '1111', '임윤아');
INSERT INTO TBL_ADMIN(ADMIN_ID, PW, NAME) VALUES ('ad_seokj', '1010', '서강준');


--○ 교수 테이블 데이터
INSERT INTO TBL_PROFESSOR (PRO_ID, PW, NAME, FSSN, BSSN, SIGNDATE)
VALUES ('hjkim', '1234567', '김호진', '650924', '1234567', TO_DATE('2002-05-22','YYYY-MM-DD'));
INSERT INTO TBL_PROFESSOR (PRO_ID, PW, NAME, FSSN, BSSN, SIGNDATE)
VALUES ('yjseo', '1123456', '서영학', '770314', '1123456', TO_DATE('2016-12-02','YYYY-MM-DD'));
INSERT INTO TBL_PROFESSOR (PRO_ID, PW, NAME, FSSN, BSSN, SIGNDATE)
VALUES ('jhhan', '1112345', '한장희', '791109', '1112345', TO_DATE('2007-01-26','YYYY-MM-DD'));
INSERT INTO TBL_PROFESSOR (PRO_ID, PW, NAME, FSSN, BSSN, SIGNDATE)
VALUES ('jhlim', '1111234', '임정훈', '880111', '1111234', TO_DATE('2010-06-06','YYYY-MM-DD'));
INSERT INTO TBL_PROFESSOR (PRO_ID, PW, NAME, FSSN, BSSN, SIGNDATE)
VALUES ('gmlee', '2345678', '이규미', '941013', '2345678', TO_DATE('2013-02-28','YYYY-MM-DD'));
INSERT INTO TBL_PROFESSOR (PRO_ID, PW, NAME, FSSN, BSSN, SIGNDATE)
VALUES ('hrkim', '1111123', '김현룡', '710211', '1111123', TO_DATE('2004-08-07','YYYY-MM-DD'));


--○ 학생 테이블 데이터
INSERT INTO TBL_STUDENT(STU_ID, PW, NAME, FSSN, BSSN, SIGNDATE)   
VALUES ('201305097', '1124567','이찬호','941108','1124567',TO_DATE('2013-02-15','YYYY-MM-DD'));
INSERT INTO TBL_STUDENT(STU_ID, PW, NAME, FSSN, BSSN, SIGNDATE)
VALUES ('201405047', '1144589','홍길동','951211','1144589',TO_DATE('2014-04-02','YYYY-MM-DD'));
INSERT INTO TBL_STUDENT(STU_ID, PW, NAME, FSSN, BSSN, SIGNDATE)
VALUES ('201305047', '2145789','박혜진','990312','2145789',TO_DATE('2013-03-12','YYYY-MM-DD'));
INSERT INTO TBL_STUDENT(STU_ID, PW, NAME, FSSN, BSSN, SIGNDATE)
VALUES ('200102059', '2234567','장민지','960618','2234567',TO_DATE('2001-08-07','YYYY-MM-DD'));
INSERT INTO TBL_STUDENT(STU_ID, PW, NAME, FSSN, BSSN, SIGNDATE)          
VALUES ('201702057', '3123458','윤유동','010505','3123458',TO_DATE('2021-02-12','YYYY-MM-DD'));
INSERT INTO TBL_STUDENT(STU_ID, PW, NAME, FSSN, BSSN, SIGNDATE)         
VALUES ('202002015', '3246887','김진희','021112','3246887',TO_DATE('2020-07-13','YYYY-MM-DD'));
INSERT INTO TBL_STUDENT(STU_ID, PW, NAME, FSSN, BSSN, SIGNDATE)         
VALUES ('202105043', '4123457','손다정','010812','4123457',TO_DATE('2020-05-17','YYYY-MM-DD'));
INSERT INTO TBL_STUDENT(STU_ID, PW, NAME, FSSN, BSSN, SIGNDATE)         
VALUES ('201403047', '2225689','장유진','950517','2225689',TO_DATE('2014-04-13','YYYY-MM-DD'));
INSERT INTO TBL_STUDENT(STU_ID, PW, NAME, FSSN, BSSN, SIGNDATE)         
VALUES ('202105044', '4812578','장진하','010712','4812578',TO_DATE('2020-05-17','YYYY-MM-DD'));
INSERT INTO TBL_STUDENT(STU_ID, PW, NAME, FSSN, BSSN, SIGNDATE)          
VALUES ('201502078', '3245678','손범석','020305','3245678',TO_DATE('2015-02-12','YYYY-MM-DD'));
INSERT INTO TBL_STUDENT(STU_ID, PW, NAME, FSSN, BSSN, SIGNDATE)          
VALUES ('201505023', '1378214','서승균','940312','1378214',TO_DATE('2015-05-07','YYYY-MM-DD'));


--○ 강의실 테이블 데이터
INSERT INTO TBL_CLASSROOM(CLASS_CODE,NAME,CAPACITY) VALUES(1,'공학관R101','강의실1층 수용인원15명');
INSERT INTO TBL_CLASSROOM(CLASS_CODE,NAME,CAPACITY) VALUES(2,'상경학관R202','강의실2층 수용인원20명');
INSERT INTO TBL_CLASSROOM(CLASS_CODE,NAME,CAPACITY) VALUES(3,'의료학관R303','강의실3층 수용인원25명');
INSERT INTO TBL_CLASSROOM(CLASS_CODE,NAME,CAPACITY) VALUES(4,'예술학관R404','강의실4층 수용인원30명');
INSERT INTO TBL_CLASSROOM(CLASS_CODE,NAME,CAPACITY) VALUES(5,'인문관R505','강의실5층 수용인원35명');
INSERT INTO TBL_CLASSROOM(CLASS_CODE,NAME,CAPACITY) VALUES(6,'공학관R205','강의실2층 수용인원30명');


--○ 배점 테이블 데이터
INSERT INTO TBL_ALLOT(ALLOT_CODE,ATTEND ,PRACTICE ,WRITTEN) VALUES(1,30,35,35);
INSERT INTO TBL_ALLOT(ALLOT_CODE,ATTEND ,PRACTICE ,WRITTEN) VALUES(2,20,40,40);
INSERT INTO TBL_ALLOT(ALLOT_CODE,ATTEND ,PRACTICE ,WRITTEN) VALUES(3,15,45,40);
INSERT INTO TBL_ALLOT(ALLOT_CODE,ATTEND ,PRACTICE ,WRITTEN) VALUES(4,10,45,45);
INSERT INTO TBL_ALLOT(ALLOT_CODE,ATTEND ,PRACTICE ,WRITTEN) VALUES(5,25,50,25);
INSERT INTO TBL_ALLOT(ALLOT_CODE,ATTEND ,PRACTICE ,WRITTEN) VALUES(6,30,40,30);


--○ 과목 테이블 데이터
INSERT INTO TBL_SUBJECTS(SUB_CODE, NAME, BOOK) VALUES(1, '자바', '자바의 정석');
INSERT INTO TBL_SUBJECTS(SUB_CODE, NAME, BOOK) VALUES(2, '오라클', '오라클의 정석');
INSERT INTO TBL_SUBJECTS(SUB_CODE, NAME, BOOK) VALUES(3, '파이썬', 'Do it! 점프 투 파이썬');
INSERT INTO TBL_SUBJECTS(SUB_CODE, NAME, BOOK) VALUES(4, 'C언어', '독하게 시작하는 C 프로그래밍');
INSERT INTO TBL_SUBJECTS(SUB_CODE, NAME, BOOK) VALUES(5, '스프링', '스프링 퀵 스타트');


--○ 과정 데이터 입력
INSERT INTO TBL_COURSE(COUR_CODE, CLASS_CODE, STARTDATE, ENDDATE, LIMIT) 
VALUES ('개발자A', 1, TO_DATE('2021-07-01','YYYY-MM-DD'), TO_DATE('2021-09-30','YYYY-MM-DD'), 15);
INSERT INTO TBL_COURSE(COUR_CODE, CLASS_CODE, STARTDATE, ENDDATE, LIMIT) 
VALUES ('빅데이터A', 2, TO_DATE('2021-03-15','YYYY-MM-DD'), TO_DATE('2021-06-15','YYYY-MM-DD'), 20);
INSERT INTO TBL_COURSE(COUR_CODE, CLASS_CODE, STARTDATE, ENDDATE, LIMIT) 
VALUES ('퍼블리셔A', 3, TO_DATE('2021-05-15','YYYY-MM-DD'), TO_DATE('2021-08-15','YYYY-MM-DD'), 25);
INSERT INTO TBL_COURSE(COUR_CODE, CLASS_CODE, STARTDATE, ENDDATE, LIMIT) 
VALUES ('개발자B', 4, TO_DATE('2021-09-30','YYYY-MM-DD'), TO_DATE('2021-12-31','YYYY-MM-DD'), 24);
INSERT INTO TBL_COURSE(COUR_CODE, CLASS_CODE, STARTDATE, ENDDATE, LIMIT) 
VALUES ('빅데이터B', 5, TO_DATE('2021-12-15','YYYY-MM-DD'), TO_DATE('2022-03-18','YYYY-MM-DD'), 20);


--○ 개설과목 데이터 입력
INSERT INTO TBL_OPSUBJECT(OPSUB_CODE, COUR_CODE, SUB_CODE, PRO_ID, ALLOT_CODE, STARTDATE, ENDDATE) 
VALUES (10001, '개발자A', 1, 'hjkim', 5, TO_DATE('2021-07-01','YYYY-MM-DD'), TO_DATE('2021-07-31','YYYY-MM-DD'));
INSERT INTO TBL_OPSUBJECT(OPSUB_CODE, COUR_CODE, SUB_CODE, PRO_ID, ALLOT_CODE, STARTDATE, ENDDATE) 
VALUES (10002, '개발자A', 2, 'yjseo', 4, TO_DATE('2021-08-01','YYYY-MM-DD'), TO_DATE('2021-08-31','YYYY-MM-DD'));
INSERT INTO TBL_OPSUBJECT(OPSUB_CODE, COUR_CODE, SUB_CODE, PRO_ID, ALLOT_CODE, STARTDATE, ENDDATE) 
VALUES (10003, '개발자A', 3, 'jhlim', 1, TO_DATE('2021-09-01','YYYY-MM-DD'), TO_DATE('2021-09-30','YYYY-MM-DD'));

INSERT INTO TBL_OPSUBJECT(OPSUB_CODE, COUR_CODE, SUB_CODE, PRO_ID, ALLOT_CODE, STARTDATE, ENDDATE) 
VALUES (10004, '빅데이터A', 2, 'jhhan', 3, TO_DATE('2021-03-15','YYYY-MM-DD'), TO_DATE('2021-04-15','YYYY-MM-DD'));
INSERT INTO TBL_OPSUBJECT(OPSUB_CODE, COUR_CODE, SUB_CODE, PRO_ID, ALLOT_CODE, STARTDATE, ENDDATE) 
VALUES (10005, '빅데이터A', 4, 'jhhan', 4, TO_DATE('2021-04-16','YYYY-MM-DD'), TO_DATE('2021-05-15','YYYY-MM-DD'));
INSERT INTO TBL_OPSUBJECT(OPSUB_CODE, COUR_CODE, SUB_CODE, PRO_ID, ALLOT_CODE, STARTDATE, ENDDATE) 
VALUES (10006, '빅데이터A', 5, 'jhhan', 4, TO_DATE('2021-05-16','YYYY-MM-DD'), TO_DATE('2021-06-15','YYYY-MM-DD'));
          
INSERT INTO TBL_OPSUBJECT(OPSUB_CODE, COUR_CODE, SUB_CODE, PRO_ID, ALLOT_CODE, STARTDATE, ENDDATE) 
VALUES (10007, '퍼블리셔A', 1, 'jhlim', 2, TO_DATE('2021-05-15','YYYY-MM-DD'), TO_DATE('2021-06-15','YYYY-MM-DD'));
INSERT INTO TBL_OPSUBJECT(OPSUB_CODE, COUR_CODE, SUB_CODE, PRO_ID, ALLOT_CODE, STARTDATE, ENDDATE) 
VALUES (10008, '퍼블리셔A', 4, 'jhlim', 4, TO_DATE('2021-06-16','YYYY-MM-DD'), TO_DATE('2021-07-16','YYYY-MM-DD'));
INSERT INTO TBL_OPSUBJECT(OPSUB_CODE, COUR_CODE, SUB_CODE, PRO_ID, ALLOT_CODE, STARTDATE, ENDDATE) 
VALUES (10009, '퍼블리셔A', 5, 'gmlee', 6, TO_DATE('2021-07-17','YYYY-MM-DD'), TO_DATE('2021-08-15','YYYY-MM-DD'));

INSERT INTO TBL_OPSUBJECT(OPSUB_CODE, COUR_CODE, SUB_CODE, PRO_ID, ALLOT_CODE, STARTDATE, ENDDATE) 
VALUES (10010, '개발자B', 1, 'gmlee', 3, TO_DATE('2021-09-30','YYYY-MM-DD'), TO_DATE('2021-10-29','YYYY-MM-DD'));
INSERT INTO TBL_OPSUBJECT(OPSUB_CODE, COUR_CODE, SUB_CODE, PRO_ID, ALLOT_CODE, STARTDATE, ENDDATE) 
VALUES (10011, '개발자B', 2, 'hrkim', 6, TO_DATE('2021-11-01','YYYY-MM-DD'), TO_DATE('2021-11-30','YYYY-MM-DD'));
INSERT INTO TBL_OPSUBJECT(OPSUB_CODE, COUR_CODE, SUB_CODE, PRO_ID, ALLOT_CODE, STARTDATE, ENDDATE) 
VALUES (10012, '개발자B', 4, 'hjkim', 2, TO_DATE('2021-12-01','YYYY-MM-DD'), TO_DATE('2021-12-31','YYYY-MM-DD'));

INSERT INTO TBL_OPSUBJECT(OPSUB_CODE, COUR_CODE, SUB_CODE, PRO_ID, ALLOT_CODE, STARTDATE, ENDDATE) 
VALUES (10013, '빅데이터B', 2, 'yjseo', 1, TO_DATE('2021-12-15','YYYY-MM-DD'), TO_DATE('2022-01-15','YYYY-MM-DD'));
INSERT INTO TBL_OPSUBJECT(OPSUB_CODE, COUR_CODE, SUB_CODE, PRO_ID, ALLOT_CODE, STARTDATE, ENDDATE) 
VALUES (10014, '빅데이터B', 3, 'hrkim', 2, TO_DATE('2022-01-16','YYYY-MM-DD'), TO_DATE('2022-02-15','YYYY-MM-DD'));
INSERT INTO TBL_OPSUBJECT(OPSUB_CODE, COUR_CODE, SUB_CODE, PRO_ID, ALLOT_CODE, STARTDATE, ENDDATE) 
VALUES (10015, '빅데이터B', 5, 'yjseo', 2, TO_DATE('2022-02-16','YYYY-MM-DD'), TO_DATE('2022-03-18','YYYY-MM-DD'));



--○ 수강신청 테이블 데이터 입력
--이찬호
INSERT INTO TBL_REGIST(REG_CODE, STU_ID, COUR_CODE, REG_DATE)
        VALUES (1, '201305097', '개발자A', TO_DATE('2020-11-01','YYYY-MM-DD'));
--홍길동
INSERT INTO TBL_REGIST(REG_CODE, STU_ID, COUR_CODE, REG_DATE)
        VALUES (2, '201405047', '빅데이터A', TO_DATE('2021-02-20','YYYY-MM-DD'));
--박혜진        
INSERT INTO TBL_REGIST(REG_CODE, STU_ID, COUR_CODE, REG_DATE)
        VALUES (3, '201305047', '개발자B', TO_DATE('2021-09-09','YYYY-MM-DD'));

--장민지
INSERT INTO TBL_REGIST(REG_CODE, STU_ID, COUR_CODE, REG_DATE)
        VALUES (4, '200102059', '퍼블리셔A', TO_DATE('2021-05-08','YYYY-MM-DD'));
--윤유동
INSERT INTO TBL_REGIST(REG_CODE, STU_ID, COUR_CODE, REG_DATE)
        VALUES (5, '201702057', '개발자A', TO_DATE('2020-11-13','YYYY-MM-DD'));


--○ 성적 테이블 데이터 입력
--이찬호 개발자A
INSERT INTO TBL_GRADE(GRADE_CODE, OPSUB_CODE, REG_CODE, ATTEND, PRACTICE, WRITTEN)
VALUES(1,10001,1,70,80,90);
INSERT INTO TBL_GRADE(GRADE_CODE, OPSUB_CODE, REG_CODE, ATTEND, PRACTICE, WRITTEN)
VALUES(2,10002,1,50,20,100);
INSERT INTO TBL_GRADE(GRADE_CODE, OPSUB_CODE, REG_CODE, ATTEND, PRACTICE, WRITTEN)
VALUES(3,10003,1,100,80,76);

--홍길동 빅데이터A
INSERT INTO TBL_GRADE(GRADE_CODE, OPSUB_CODE, REG_CODE, ATTEND, PRACTICE, WRITTEN)
VALUES(4,10004,2,50,60,70);
INSERT INTO TBL_GRADE(GRADE_CODE, OPSUB_CODE, REG_CODE, ATTEND, PRACTICE, WRITTEN)
VALUES(5,10005,2,50,20,100);
INSERT INTO TBL_GRADE(GRADE_CODE, OPSUB_CODE, REG_CODE, ATTEND, PRACTICE, WRITTEN)
VALUES(6,10006,2,100,80,80);

--박혜진 개발자B
INSERT INTO TBL_GRADE(GRADE_CODE, OPSUB_CODE, REG_CODE, ATTEND, PRACTICE, WRITTEN)
VALUES(7,10010,3,70,80,90);
INSERT INTO TBL_GRADE(GRADE_CODE, OPSUB_CODE, REG_CODE, ATTEND, PRACTICE, WRITTEN)
VALUES(8,10011,3,50,50,80);
INSERT INTO TBL_GRADE(GRADE_CODE, OPSUB_CODE, REG_CODE, ATTEND, PRACTICE, WRITTEN)
VALUES(9,10012,3,70,60,50);

--장민지 퍼블리셔A
INSERT INTO TBL_GRADE(GRADE_CODE, OPSUB_CODE, REG_CODE, ATTEND, PRACTICE, WRITTEN)
VALUES(10,10007,4,70,70,70);
INSERT INTO TBL_GRADE(GRADE_CODE, OPSUB_CODE, REG_CODE, ATTEND, PRACTICE, WRITTEN)
VALUES(11,10008,4,70,70,50);
INSERT INTO TBL_GRADE(GRADE_CODE, OPSUB_CODE, REG_CODE, ATTEND, PRACTICE, WRITTEN)
VALUES(12,10009,4,90,90,80);

--윤유동 개발자A
INSERT INTO TBL_GRADE(GRADE_CODE, OPSUB_CODE, REG_CODE, ATTEND, PRACTICE, WRITTEN)
VALUES(13,10001,5,100,90,90);
INSERT INTO TBL_GRADE(GRADE_CODE, OPSUB_CODE, REG_CODE, ATTEND, PRACTICE, WRITTEN)
VALUES(14,10002,5,80,60,100);
INSERT INTO TBL_GRADE(GRADE_CODE, OPSUB_CODE, REG_CODE, ATTEND, PRACTICE, WRITTEN)
VALUES(15,10003,5,80,80,80);


--○ 중도하차 테이블 데이터 입력
INSERT INTO TBL_QUIT(QUIT_CODE, REG_CODE, REASON, QUIT_DATE)
VALUES(1, 4, '취업성공!!','2021-07-01');
--================================================================================================

--■■■ 뷰 생성 ■■■


--==============================================================================
--○ 모든학생들의 모든 수강과목에 대한 정보 조회하는 뷰

-- 출력 : 학생명, 과정명, 수강과목, 출결점수, 실기점수, 필기점수, 총점, 중도하차여부
--==============================================================================
CREATE OR REPLACE VIEW VIEW_STUDENT_INFO
AS
SELECT T1.학생명, T1.과정명, T1.수강과목, T1.출결점수, T1.실기점수, T1.필기점수
     , (T1.출결점수 + T1.실기점수 + T1.필기점수) "총점", T1.중도하차여부
FROM
(
    SELECT ST.NAME"학생명",CO.COUR_CODE"과정명" 
        , SU.NAME "수강과목"
        , FN_SCORE_ATTEND(GR.GRADE_CODE) "출결점수"
        , FN_SCORE_PRACTICE(GR.GRADE_CODE) "실기점수"
        , FN_SCORE_WRITTEN(GR.GRADE_CODE) "필기점수"
        , FN_QUIT(RE.REG_CODE) "중도하차여부"
    FROM TBL_STUDENT ST LEFT JOIN TBL_REGIST RE
            ON ST.STU_ID = RE.STU_ID
           LEFT JOIN TBL_COURSE CO
            ON RE.COUR_CODE = CO.COUR_CODE
           LEFT JOIN TBL_OPSUBJECT OP
            ON CO.COUR_CODE = OP.COUR_CODE
           LEFT JOIN TBL_SUBJECTS SU 
            ON OP.SUB_CODE = SU.SUB_CODE 
           LEFT JOIN TBL_GRADE GR
            ON OP.OPSUB_CODE = GR.OPSUB_CODE
            AND RE.REG_CODE = GR.REG_CODE
)T1;

--조회
SELECT *   
FROM VIEW_STUDENT_INFO;


--==============================================================================
--○ 모든 과목의 정보 조회 뷰 생성

-- 출력 : 과정명, 강의실, 과목명, 과목SDATE, 과목EDATE, 교재, 교수명
--==============================================================================
CREATE OR REPLACE VIEW VIEW_OPSUBJECT
AS
SELECT O.COUR_CODE "과정명", CR.NAME "강의실", S.NAME "과목명"
    , O.STARTDATE "과목시작일", O.ENDDATE "과목종료일", S.BOOK "교재명", P.NAME "교수명"
FROM TBL_OPSUBJECT O LEFT JOIN TBL_SUBJECTS S
ON O.SUB_CODE = S.SUB_CODE
    LEFT JOIN TBL_PROFESSOR P
    ON O.PRO_ID = P. PRO_ID
    LEFT JOIN TBL_COURSE C
    ON O.COUR_CODE = C.COUR_CODE
    LEFT JOIN TBL_CLASSROOM CR
    ON C.CLASS_CODE = CR.CLASS_CODE;
    

--조회
SELECT * FROM VIEW_OPSUBJECT;


--==============================================================================
--○ 교수자 과목 조회 뷰

-- (모든 교수자에 대한 정보 출력)
-- 교수명, 배정과목, 과목SDATE, 과목EDATE, 교재명, 강의실, 강의 진행 여부
-- 교수, 과목, 개설과목, 과정, 강의실
-- 과정 진행 상황 반환하는 함수 (FN_COURSE) 사용
--==============================================================================

CREATE OR REPLACE VIEW VIEW_PROFESSOR_COUR
AS
SELECT P.NAME "교수명", C.COUR_CODE "과정명",  S.NAME "배정과목", O.STARTDATE "과목시작일", O.ENDDATE "과목종료일"
     , S.BOOK "교재명", R.NAME "강의실", FN_COURSE(C.COUR_CODE) "강의진행여부"
FROM TBL_PROFESSOR P LEFT JOIN TBL_OPSUBJECT O
ON P.PRO_ID = O.PRO_ID
    LEFT JOIN TBL_SUBJECTS S
    ON O.SUB_CODE = S.SUB_CODE
    LEFT JOIN TBL_COURSE C
    ON O.COUR_CODE = C.COUR_CODE
    LEFT JOIN TBL_CLASSROOM R
    ON C.CLASS_CODE = R.CLASS_CODE;


-- 조회    
SELECT *
FROM VIEW_PROFESSOR_COUR;



--==============================================================================
--○ 개설된 과정 조회 하는 VIEW 생성 (VIEW_PROFESSOR_COUR) 

--출력 : 과정명, 강의실, 과목명, 과정시작일, 과목종료일, 교재, 교수명, 강의진행여부
--과정 진행 상황 반환하는 함수 (FN_COURSE) 사용
--==============================================================================

CREATE OR REPLACE VIEW VIEW_COURSE
AS
SELECT CO.COUR_CODE"과정명", CL.CAPACITY "강의실" , SU.NAME"과목명"
     , CO.STARTDATE"시작일",CO.ENDDATE"종료일", SU.BOOK"교재이름", PRO.NAME"교수자명"     
     , FN_COURSE(CO.COUR_CODE)"강의진행여부"
FROM TBL_PROFESSOR PRO RIGHT JOIN TBL_OPSUBJECT OP
ON PRO.PRO_ID = OP.PRO_ID
    LEFT JOIN TBL_SUBJECTS SU ON OP.SUB_CODE = SU.SUB_CODE
    RIGHT JOIN TBL_COURSE CO ON CO.COUR_CODE = OP.COUR_CODE
    LEFT JOIN TBL_CLASSROOM CL ON CL.CLASS_CODE = CO.CLASS_CODE;

 
--조회
SELECT *
FROM VIEW_COURSE;


--==============================================================================
--○ 교수 과목 성적 조회 뷰

--출력 : 교수명, 과정명, 과목시작일, 과목종료일, 교재, 학생이름, 출결점수, 실기점수
--     , 필기점수, 총점, 등수, 중도하차여부      
--점수 계산 함수 (FN_SCORE_PRACTICE, FN_SCORE_WRITTEN, FN_SCORE_ATTEND) 사용
--==============================================================================

-- 교수자 과목 성적 조회
CREATE OR REPLACE VIEW VIEW_PROFESSOR
AS
SELECT T.교수명, T.과정명, T.과목명, T.과목시작일, T.과목종료일, T.교재이름, T.학생이름, T.출결, T.실기
     , T.필기,(T.출결점수 + T.필기점수 + T.실기점수)"총점"
     , RANK() OVER(PARTITION BY T.과정명, T.과목명 ORDER BY (T.출결점수 + T.필기점수 + T.실기점수)DESC)"등수"
     , T.중도하차     
FROM ( 
       SELECT PRO.NAME"교수명", SU.NAME"과목명", OP.STARTDATE"과목시작일", OP.ENDDATE"과목종료일", SU.BOOK"교재이름"
             , ST.NAME"학생이름", GR.ATTEND"출결", GR.PRACTICE"실기", GR.WRITTEN"필기"
             , FN_SCORE_PRACTICE(GR.GRADE_CODE)"실기점수"
             , FN_SCORE_WRITTEN(GR.GRADE_CODE)"필기점수"
             , FN_SCORE_ATTEND(GR.GRADE_CODE)"출결점수"
             , OP.COUR_CODE"과정명"
             , FN_QUIT(RE.REG_CODE)"중도하차"
  
        FROM TBL_OPSUBJECT OP LEFT JOIN TBL_PROFESSOR PRO
        ON PRO.PRO_ID = OP.PRO_ID
            LEFT JOIN TBL_SUBJECTS SU ON SU.SUB_CODE = OP.SUB_CODE
            LEFT JOIN TBL_GRADE GR ON GR.OPSUB_CODE = OP.OPSUB_CODE
            LEFT JOIN TBL_REGIST RE ON RE.REG_CODE = GR.REG_CODE
            LEFT JOIN TBL_STUDENT ST ON ST.STU_ID = RE.STU_ID    
)T;


-- 조회
SELECT * 
FROM VIEW_PROFESSOR;

-- 중도하차한 학생 빼고 성적 조회
SELECT * 
FROM VIEW_PROFESSOR
WHERE 중도하차 <> '중도하차';


--==============================================================================
--○ 학생 성적 조회 뷰
-- 출력정보 : 학생명, 과정명, 과목명, 과정시작일, 과정종료일, 교재명 
--           , 출결점수 , 필기점수, 실기점수, 총점, 등수
--점수 계산 함수 (FN_SCORE_PRACTICE, FN_SCORE_WRITTEN, FN_SCORE_ATTEND) 사용
--==============================================================================
CREATE OR REPLACE VIEW VIEW_STUDENT_GRADE
AS
SELECT T2.학생명, T2.과정명, T2.과목명, T2.과정시작일, T2.과정종료일, T2.교재명
    , T2.출결점수, T2.필기점수, T2.실기점수, T2.총점
    , RANK() OVER(PARTITION BY T2.과정명, T2.과목명 ORDER BY T2.총점 DESC) "등수"
FROM
(
    SELECT T1.학생명, T1.과정명, T1.과목명, T1.과정시작일, T1.과정종료일, T1.교재명
        , T1.출결점수, T1.필기점수, T1.실기점수, (T1.출결점수 + T1.필기점수 + T1.실기점수) "총점"
    FROM
    (
    SELECT S.NAME "학생명", R.COUR_CODE "과정명", SJ.NAME "과목명"
         , C.STARTDATE "과정시작일", C.ENDDATE "과정종료일", SJ.BOOK "교재명"
    
         , FN_SCORE_PRACTICE(G.GRADE_CODE) "실기점수"
         , FN_SCORE_WRITTEN(G.GRADE_CODE) "필기점수"
         , FN_SCORE_ATTEND(G.GRADE_CODE) "출결점수"   
    FROM TBL_STUDENT S LEFT JOIN TBL_REGIST R
    ON S.STU_ID = R.STU_ID
        LEFT JOIN TBL_COURSE C
        ON R.COUR_CODE = C.COUR_CODE
        LEFT JOIN TBL_OPSUBJECT O
        ON C.COUR_CODE = O.COUR_CODE
        LEFT JOIN TBL_SUBJECTS SJ
        ON O.SUB_CODE = SJ.SUB_CODE
        JOIN TBL_GRADE G
        ON O.OPSUB_CODE = G.OPSUB_CODE  AND R.REG_CODE = G.REG_CODE
    ) T1
) T2;

    
-- 조회
SELECT *
FROM VIEW_STUDENT_GRADE;


